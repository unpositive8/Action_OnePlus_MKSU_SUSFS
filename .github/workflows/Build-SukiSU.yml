name: Build OnePlus_SukiSU Ultra All
on:
  workflow_dispatch:
    inputs:
      CPU:
        type: choice
        description: "分支"
        required: true
        default: sm8550
        options:
          - sm7550
          - sm7675
          - sm8450
          - sm8475
          - sm8550
          - sm8650
          - sm8750
      FEIL:
        type: choice
        description: "配置文件"
        required: true
        default: oneplus_ace2pro_v
        options:
          - oneplus_nord_ce4_v
          - oneplus_ace_3v_v
          - oneplus_nord_4_v
          - oneplus_10_pro_v
          - oneplus_10t_v
          - oneplus_11r_v
          - oneplus_ace2_v
          - oneplus_ace_pro_v
          - oneplus_11_v
          - oneplus_12r_v
          - oneplus_ace2pro_v
          - oneplus_ace3_v
          - oneplus_open_v
          - oneplus12_v
          - oneplus_13r
          - oneplus_ace3_pro_v
          - oneplus_ace5
          - oneplus_pad2_v
          - oneplus_13
          - oneplus_13t
          - oneplus_ace5_pro
          - GitHub有bug可能不显示最后一项,误使用此项
      CPUD:
        type: choice
        description: "处理器代号"
        required: true
        default: kalama
        options:
          - crow
          - waipio
          - kalama
          - pineapple
          - sun
      ANDROID_VERSION:
        type: choice
        description: "内核安卓版本"
        required: true
        default: android13
        options:
          - android12
          - android13
          - android14
          - android15
      KERNEL_VERSION:
       type: choice
       description: "内核版本"
       required: true
       default: "5.15"
       options:
         - "5.10"
         - "5.15"
         - "6.1"
         - "6.6"
      BUILD_METHOD:
        type: choice
        description: "编译方式"
        required: true
        default: gki
        options:
          - gki
          - perf
      SUSFS_CI:
        type: boolean
        description: "下载SUSFS模块是否使用CI构建？"
        required: true
        default: true
      VFS:
        type: boolean
        description: "是否启用手动钩子？"
        required: true
        default: true
      KPM:
        type: boolean
        description: "是否启用KPM？"
        required: true
        default: true
      ZRAM:
        type: boolean
        description: "是否启用添加更多的ZRAM算法？"
        required: true
        default: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Configure Git
        run: |
          git config --global user.name "Numbersf"
          git config --global user.email "263623064@qq.com"

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y python3 git curl jq # Added jq for SUSFS CI step

      - name: Show selected inputs debug
        run: |
          echo "Selected CPU: ${{ github.event.inputs.CPU }}"
          echo "Selected FEIL: ${{ github.event.inputs.FEIL }}"
          echo "Selected CPUD: ${{ github.event.inputs.CPUD }}"
          echo "Selected ANDROID_VERSION: ${{ github.event.inputs.ANDROID_VERSION }}"
          echo "Selected KERNEL_VERSION: ${{ github.event.inputs.KERNEL_VERSION }}"
          echo "Selected BUILD_METHOD: ${{ github.event.inputs.BUILD_METHOD }}"
          echo "Selected SUSFS_CI: ${{ github.event.inputs.SUSFS_CI }}"
          echo "Selected ZRAM: ${{ github.event.inputs.ZRAM }}"
          echo "Selected VFS: ${{ github.event.inputs.VFS }}"
          echo "Selected KPM: ${{ github.event.inputs.KPM }}"

      - name: Install repo tool
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize repo and sync
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1
          repo sync
          if [  -e kernel_platform/common/BUILD.bazel ]; then
          sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' kernel_platform/common/BUILD.bazel
          fi
          if [  -e kernel_platform/msm-kernel/BUILD.bazel ]; then
          sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' kernel_platform/msm-kernel/BUILD.bazel
          fi
          rm -f kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm -f kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"

      - name: Force remove -dirty suffix
        run: |
          cd kernel_workspace/kernel_platform
          sed -i 's/ -dirty//g' common/scripts/setlocalversion
          sed -i 's/ -dirty//g' msm-kernel/scripts/setlocalversion
          # Check if external/dtc/scripts/setlocalversion exists before trying to modify it
          if [ -f external/dtc/scripts/setlocalversion ]; then
            sed -i 's/ -dirty//g' external/dtc/scripts/setlocalversion
          else
            echo "external/dtc/scripts/setlocalversion not found, skipping."
          fi
          sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' common/scripts/setlocalversion
          git add -A
          git commit -m "Force remove -dirty suffix from kernel version" --allow-empty

      - name: Add KernelSU-SukiSU Ultra
        run: |
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-dev
          cd ./KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10606)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          export KSU_VERSION=$KSU_VERSION
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      - name: Apply Patches SukiSU Ultra
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          cd kernel_platform
          echo "正在给内核打susfs补丁"
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

          if [ "${{ github.event.inputs.ZRAM }}" = "true" ]; then
          echo "正在给内核打zram补丁"
          cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
          cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
          cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
          cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
          fi

          cd ./common
          patch -p1 < 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch || true
          echo "完成"

      - name: Apply Hide Stuff Patches
        run: |
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/69_hide_stuff.patch ./
          echo "正在打隐藏应用补丁"
          patch -p1 -F 3 < 69_hide_stuff.patch

      - name: Apply VFS
        run: |
          cd kernel_workspace/kernel_platform/common
          if [ "${{ github.event.inputs.VFS }}" = "true" ]; then
          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
          echo "正在打vfs补丁"
          patch -p1 -F 3 < syscall_hooks.patch
          echo "vfs_patch完成"
          fi

      - name: Apply LZ4KD
        run: |
          cd kernel_workspace/kernel_platform/common
          if [ "${{ github.event.inputs.ZRAM }}" = "true" ]; then
            cp ../../SukiSU_patch/other/zram/zram_patch/${{ github.event.inputs.KERNEL_VERSION }}/lz4kd.patch ./
            echo "正在打lz4kd补丁"
            patch -p1 -F 3 < lz4kd.patch || true
            echo '完成LZ4KD补丁'
          fi

      - name: Add Configuration Settings
        run: |
          cd kernel_workspace/kernel_platform
          CONFIG_FILE="./common/arch/arm64/configs/gki_defconfig" # Use quotes for safety
          KERNEL_VERSION="${{ github.event.inputs.KERNEL_VERSION }}"

          # SukiSU Ultra config
          echo "CONFIG_KSU=y" >> "$CONFIG_FILE"
          echo "CONFIG_KPM=y" >> "$CONFIG_FILE" # KPM is always enabled if this block runs, check if KPM input should gate this
          if [ "${{ github.event.inputs.VFS }}" = "false" ]; then
            echo "CONFIG_KPROBES=y" >> "$CONFIG_FILE"
          fi
          # VFS config
          if [ "${{ github.event.inputs.VFS }}" = "true" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
          fi

          if [ "${{ github.event.inputs.VFS }}" = "false" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> "$CONFIG_FILE"
          fi

          # SUSFS config (Only if VFS is true? Consider the logic here)
          if [ "${{ github.event.inputs.VFS }}" = "true" ]; then
            echo "CONFIG_KSU_SUSFS=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$CONFIG_FILE" # Check if this should be configurable
            echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$CONFIG_FILE"
          fi

          # Remove check_defconfig
          if [ -f ./common/build.config.gki ]; then
            sed -i 's/check_defconfig//' ./common/build.config.gki
          fi

          # LZ4KD配置
          if [ "${{ github.event.inputs.ZRAM }}" = "true" ]; then
            # CONFIG_FILE is already ./common/arch/arm64/configs/gki_defconfig

            if [ "${{ github.event.inputs.KERNEL_VERSION }}" = "5.10" ]; then
              echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
              echo "CONFIG_ZRAM=y" >> "$CONFIG_FILE"
              echo "CONFIG_MODULE_SIG=n" >> "$CONFIG_FILE" # This might conflict if SIG_FORCE is also set later
              echo "CONFIG_CRYPTO_LZO=y" >> "$CONFIG_FILE"
              echo "CONFIG_ZRAM_DEF_COMP_LZ4KD=y" >> "$CONFIG_FILE"
            fi

            if [ "${{ github.event.inputs.KERNEL_VERSION }}" != "6.6" ] && [ "${{ github.event.inputs.KERNEL_VERSION }}" != "5.10" ]; then
              if grep -q "CONFIG_ZSMALLOC" -- "$CONFIG_FILE"; then
                sed -i 's/CONFIG_ZSMALLOC=m/CONFIG_ZSMALLOC=y/g' "$CONFIG_FILE"
              else
                echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
              fi
              sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' "$CONFIG_FILE"
            fi

            if [ "${{ github.event.inputs.KERNEL_VERSION }}" = "6.6" ]; then
              echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
              sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' "$CONFIG_FILE"
            fi

            if [ "${{ github.event.inputs.ANDROID_VERSION }}" = "android14" ] || [ "${{ github.event.inputs.ANDROID_VERSION }}" = "android15" ]; then
              # DO NOT remove zram.ko and zsmalloc.ko from modules.bzl as Bazel needs them if they are built.
              # if [  -e ./common/modules.bzl ]; then
              #   sed -i 's/"drivers\/block\/zram\/zram\.ko",//g; s/"mm\/zsmalloc\.ko",//g' "./common/modules.bzl"
              # fi
              #
              # if [  -e ./msm-kernel/modules.bzl ]; then
              #   sed -i 's/"drivers\/block\/zram\/zram\.ko",//g; s/"mm\/zsmalloc\.ko",//g' "./msm-kernel/modules.bzl"
              # fi

              # Attempt to set ZRAM/ZSMALLOC as built-in in the msm-kernel specific config if it exists
              MSM_KERNEL_DEVICE_CONFIG="msm-kernel/arch/arm64/configs/${{ github.event.inputs.CPUD }}-GKI.config"
              if [ -f "$MSM_KERNEL_DEVICE_CONFIG" ]; then
                echo "CONFIG_ZSMALLOC=y" >> "$MSM_KERNEL_DEVICE_CONFIG"
                echo "CONFIG_ZRAM=y" >> "$MSM_KERNEL_DEVICE_CONFIG"
              else
                echo "Warning: $MSM_KERNEL_DEVICE_CONFIG not found, skipping adding ZRAM/ZSMALLOC=y for it."
              fi
              
              echo "CONFIG_MODULE_SIG_FORCE=n" >> "$CONFIG_FILE" # This applies to common gki_defconfig
            elif [ "${{ github.event.inputs.KERNEL_VERSION }}" = "5.10" ] || [ "${{ github.event.inputs.KERNEL_VERSION }}" = "5.15" ]; then
              # This logic is for older kernel versions when *NOT* on Android 14/15 with ZRAM=true
              rm -f "common/android/gki_aarch64_modules"
              touch "common/android/gki_aarch64_modules"
            fi

            # Common ZRAM options if ZRAM and ZSMALLOC are enabled (check if this should be conditional on Kconfig readback)
            if grep -q "CONFIG_ZSMALLOC=y" "$CONFIG_FILE" && grep -q "CONFIG_ZRAM=y" "$CONFIG_FILE"; then
              echo "CONFIG_CRYPTO_LZ4HC=y" >> "$CONFIG_FILE"
              echo "CONFIG_CRYPTO_LZ4K=y" >> "$CONFIG_FILE"
              echo "CONFIG_CRYPTO_LZ4KD=y" >> "$CONFIG_FILE"
              echo "CONFIG_CRYPTO_842=y" >> "$CONFIG_FILE"
              echo "CONFIG_ZRAM_WRITEBACK=y" >> "$CONFIG_FILE"
            fi
          fi

      - name: Build kernel
        if: ${{ github.event.inputs.CPUD == 'pineapple' || github.event.inputs.CPUD == 'sun' || github.event.inputs.CPU == 'sm8650' || github.event.inputs.CPU == 'sm7675' }} # Added CPUD check for pineapple/sun
        run: |
          cd kernel_workspace
          # Assuming build_with_bazel.py is in kernel_platform. If it's in kernel_platform/oplus/build, adjust path.
          # The original had CPUD == sm8650 or sm7675, but CPUD is pineapple/sun for these.
          # Let's stick to the CPUD for Bazel targets if that's how build_with_bazel.py works
          ./kernel_platform/build_with_bazel.py -t ${{ github.event.inputs.CPUD }} ${{ github.event.inputs.BUILD_METHOD }}
          
      - name: Fallback build kernel (oplus_build_kernel.sh)
        # This condition should be the opposite of the Bazel build condition.
        # if: ${{ github.event.inputs.CPU != 'sm8650' && github.event.inputs.CPU != 'sm7675' }}
        if: '! (github.event.inputs.CPUD == ''pineapple'' || github.event.inputs.CPUD == ''sun'' || github.event.inputs.CPU == ''sm8650'' || github.event.inputs.CPU == ''sm7675'')'
        run: |
         cd kernel_workspace
         LTO=thin SYSTEM_DLKM_RE_SIGN=0 BUILD_SYSTEM_DLKM=0 KMI_SYMBOL_LIST_STRICT_MODE=0 ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ github.event.inputs.CPUD }} ${{ github.event.inputs.BUILD_METHOD }}

      - name: Make AnyKernel3
        run: |
          git clone https://github.com/Numbersf/AnyKernel3 --depth=1 AnyKernel3_SRC # Clone to a specific dir
          mv AnyKernel3_SRC ./AnyKernel3 # Move to avoid issues if AnyKernel3 dir exists
          rm -rf ./AnyKernel3/.git

          # Define potential output directories based on build method
          # Note: bazel-out path structure can be complex. The one in original script is a common pattern.
          # Fallback oplus_build_kernel.sh output structure is also listed.
          
          # Potential Bazel output paths for Image
          # Path from original log: kernel_platform/out/bazel/output_user_root/.../execroot/__main__/msm-kernel/...
          # This often symlinks or copies to a friendlier path like:
          # kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/dist/Image (common for non-Bazel too)
          # kernel_platform/bazel-out/k8-fastbuild/bin/msm-kernel/${{ github.event.inputs.CPUD }}_gki_kbuild_mixed_tree/Image (more specific Bazel path)
          
          # Potential oplus_build_kernel.sh output paths for Image
          # kernel_platform/out/msm-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/dist/Image
          # kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/gki_kernel/common/arch/arm64/boot/Image
          # kernel_platform/out/msm-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/gki_kernel/common/arch/arm64/boot/Image

          # Common base for many outputs
          DIST_BASE_COMMON="kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/dist"
          # Bazel specific output (can vary greatly based on exact Bazel setup)
          DIST_BAZEL_SPECIFIC="kernel_workspace/kernel_platform/bazel-out/k8-fastbuild/bin/msm-kernel/${{ github.event.inputs.CPUD }}_gki_kbuild_mixed_tree" # Example
          # Oplus script specific base
          DIST_OPLUS_BASE="kernel_workspace/kernel_platform/out/msm-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/dist"
          
          # Boot image paths (less common for just "Image" but possible for full boot images)
          BOOT_PATH_COMMON_GKI="kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/gki_kernel/common/arch/arm64/boot"
          BOOT_PATH_OPLUS_GKI="kernel_workspace/kernel_platform/out/msm-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/gki_kernel/common/arch/arm64/boot"
          
          # A more generic Bazel output for artifacts is often under kernel_platform/out/dist or kernel_platform/out/target/product/...
          # The specific `msm-kernel` paths are if the Bazel rules output there.
          # The `pineapple_gki` from log implies output might be structured relative to that target.

          IMAGE_CANDIDATES=(
            "$DIST_BASE_COMMON/Image"
            "$DIST_BAZEL_SPECIFIC/Image"
            "$DIST_OPLUS_BASE/Image"
            "$BOOT_PATH_COMMON_GKI/Image"
            "$BOOT_PATH_OPLUS_GKI/Image"
            # A more generic find as a last resort, but try to be specific first
            # This find is too broad and might pick up intermediate files.
            # "$(find ./kernel_workspace/kernel_platform/out -name Image -type f | head -n 1)"
          )

          IMAGE_PATH=""
          for candidate in "${IMAGE_CANDIDATES[@]}"; do
            if [ -f "$candidate" ]; then
              IMAGE_PATH="$candidate"
              echo "Found Image at: $IMAGE_PATH"
              break
            fi
          done

          if [ -z "$IMAGE_PATH" ]; then
            echo "Image file not found in predefined locations. Trying a broader search in kernel_platform/out..."
            # More specific find within common output structures
            IMAGE_PATH=$(find ./kernel_workspace/kernel_platform/out -path "*/dist/Image" -o -path "*/boot/Image" -o -path "*/Image" -type f 2>/dev/null | head -n 1)
            if [ -f "$IMAGE_PATH" ]; then
                echo "Found Image with broader search at: $IMAGE_PATH"
            fi
          fi

          if [ -z "$IMAGE_PATH" ] || [ ! -f "$IMAGE_PATH" ]; then
            echo "Error: Kernel Image not found after searching. Build might have failed or output path is unexpected."
            echo "Listing contents of common output directories for debugging:"
            ls -R ./kernel_workspace/kernel_platform/out 2>/dev/null | head -n 100
            exit 1
          fi

          cp "$IMAGE_PATH" ./AnyKernel3/Image
          echo "Copied $IMAGE_PATH to ./AnyKernel3/Image"

          # Determine the source directory for other artifacts (dtbo, dlkm etc.)
          # This should ideally be the directory where Image was found, or a known 'dist' sibling.
          ARTIFACT_SOURCE_DIR=$(dirname "$IMAGE_PATH")
          # If Image was in a 'boot' subdir, the 'dist' is usually one level up.
          if [[ "$ARTIFACT_SOURCE_DIR" == *"/boot"* ]]; then
            ARTIFACT_SOURCE_DIR=$(dirname "$ARTIFACT_SOURCE_DIR")
          fi
          # Ensure it ends with /dist or is the direct dir if Image was already in dist
          if [[ ! "$ARTIFACT_SOURCE_DIR" == *"/dist" ]]; then
             if [ -d "$ARTIFACT_SOURCE_DIR/dist" ]; then # Check if a dist subdir exists
                ARTIFACT_SOURCE_DIR="$ARTIFACT_SOURCE_DIR/dist"
             elif [ -d "$(dirname "$ARTIFACT_SOURCE_DIR")/dist" ]; then # Check if parent has a dist subdir
                ARTIFACT_SOURCE_DIR="$(dirname "$ARTIFACT_SOURCE_DIR")/dist"
             fi
          fi
          echo "Using artifact source directory: $ARTIFACT_SOURCE_DIR"


          # Optional copy of other files (dtbo, vendor_boot, dlkm images)
          # This logic was specific to sm8750, generalize or make conditional
          if [ "${{ github.event.inputs.CPUD == 'pineapple' || github.event.inputs.CPU == 'sm8650' || github.event.inputs.CPU == 'sm8750' }}" = "true" ]; then # Example condition
            echo "Copying additional artifacts like dtbo, vendor_boot, dlkm..."
            for file_pattern in dtbo.img vendor_boot.img "*dlkm*.img" "*dlkm*.erofs"; do
              # Search in the determined artifact source directory
              found_files=( $(find "$ARTIFACT_SOURCE_DIR" -maxdepth 1 -name "$file_pattern" -type f) )
              for found_file in "${found_files[@]}"; do
                if [ -f "$found_file" ]; then
                  target_name=$(basename "$found_file")
                  if [[ "$target_name" == *".erofs.img" ]]; then # e.g. system_dlkm.erofs.img -> system_dlkm.img
                     target_name="${target_name/.erofs.img/.img}"
                  elif [[ "$target_name" == *".erofs" ]]; then # e.g. system_dlkm.erofs -> system_dlkm.img
                     target_name="${target_name/.erofs/.img}"
                  fi
                  echo "Copying $found_file to ./AnyKernel3/$target_name"
                  cp "$found_file" "./AnyKernel3/$target_name"
                fi
              done
            done
          fi


      - name: Apply patch_linux and replace Image (KPM related)
        if: ${{ github.event.inputs.KPM == 'true' }}
        # This step assumes Image is in a very specific path.
        # It should operate on the ./AnyKernel3/Image or the $IMAGE_PATH
        run: |
          # Use the Image already copied to AnyKernel3 for consistency
          cd ./AnyKernel3
          if [ ! -f Image ]; then
            echo "Error: Image not found in AnyKernel3 for KPM patching."
            exit 1
          fi
          curl -LO https://raw.githubusercontent.com/Numbersf/Action-Build/main/patch_linux
          chmod +x patch_linux
          echo "Patching AnyKernel3/Image with patch_linux..."
          # patch_linux might expect Image to be in current dir and output oImage
          # Or it might modify Image in-place. Adjust based on patch_linux behavior.
          # Assuming it creates oImage from Image in current dir:
          ./patch_linux Image oImage # Assuming patch_linux <input> <output>
          if [ -f oImage ]; then
            echo "patch_linux successful, replacing Image with oImage."
            mv oImage Image
          else
            echo "Warning: oImage not created by patch_linux. Original Image kept."
            # Or exit 1 if this is critical
          fi
          # No need to copy back to $GITHUB_WORKSPACE/AnyKernel3/Image as we are already in it.
          cd $GITHUB_WORKSPACE # Go back to workspace root

      - name: Download Latest SUSFS Module from CI
        if: ${{ github.event.inputs.SUSFS_CI == 'true' }}
        run: |
          LATEST_RUN_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs?status=success&event=push" | \
            jq -r '.workflow_runs[] | select(.head_branch == "v1.5.2+") | .id' | head -n 1)

          if [ -z "$LATEST_RUN_ID" ]; then
            echo "No successful push event run found for branch v1.5.2+ on sidex15/susfs4ksu-module."
            echo "Trying to find any successful run for the branch..."
            LATEST_RUN_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs?status=success" | \
              jq -r '.workflow_runs[] | select(.head_branch == "v1.5.2+") | .id' | head -n 1)
            if [ -z "$LATEST_RUN_ID" ]; then
                echo "Still no successful run found for branch v1.5.2+. Cannot download artifact."
                exit 1
            fi
          fi
          echo "Found latest successful run ID: $LATEST_RUN_ID for branch v1.5.2+"

          ARTIFACT_URL=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs/$LATEST_RUN_ID/artifacts" | jq -r '.artifacts[0].archive_download_url')

          if [ -z "$ARTIFACT_URL" ] || [ "$ARTIFACT_URL" = "null" ]; then
            echo "Failed to get artifact download URL for run ID $LATEST_RUN_ID."
            # List artifacts for debugging
            curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs/$LATEST_RUN_ID/artifacts"
            exit 1
          fi
          echo "Downloading artifact from $ARTIFACT_URL"
          curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -o ksu_module_susfs.zip "$ARTIFACT_URL"
          cp ksu_module_susfs.zip ./AnyKernel3/

      - name: Download Latest SUSFS Module from Release
        if: ${{ github.event.inputs.SUSFS_CI == 'false' }}
        run: |
          # The URL points to a zip with a version number in its name.
          # Using "latest" in the URL might redirect, but the filename might still be specific.
          # Let's try to get the tag name for "latest" and construct the filename.
          LATEST_TAG=$(curl -s https://api.github.com/repos/sidex15/ksu_module_susfs/releases/latest | jq -r .tag_name)
          if [ -z "$LATEST_TAG" ] || [ "$LATEST_TAG" = "null" ]; then
            echo "Could not determine latest release tag. Falling back to fixed name."
            LATEST_TAG="1.5.2+" # Fallback or ensure this matches expected name
          fi
          # Construct filename, assuming it matches the tag or a known pattern
          # Example: ksu_module_susfs_v1.5.2+.zip or ksu_module_susfs_1.5.2+.zip
          # The original script used a hardcoded name, which is safer if the release name pattern is fixed.
          DOWNLOAD_FILENAME="ksu_module_susfs_1.5.2+.zip" # As per original script
          echo "Attempting to download $DOWNLOAD_FILENAME from latest release..."
          wget https://github.com/sidex15/ksu_module_susfs/releases/latest/download/$DOWNLOAD_FILENAME
          if [ -f "$DOWNLOAD_FILENAME" ]; then
            cp "$DOWNLOAD_FILENAME" ./AnyKernel3/
          else
            echo "Failed to download $DOWNLOAD_FILENAME. Please check release assets."
            exit 1
          fi

      - name: Set suffix
        id: suffix
        run: |
          current_suffix=""
          if [ "${{ github.event.inputs.KPM }}" = "true" ]; then
            current_suffix="${current_suffix}_KPM"
          fi
          if [ "${{ github.event.inputs.VFS }}" = "true" ]; then
            current_suffix="${current_suffix}_VFS"
          fi
          if [ "${{ github.event.inputs.ZRAM }}" = "true" ]; then
            current_suffix="${current_suffix}_LZ4KD"
          fi
          echo "value=$current_suffix" >> $GITHUB_OUTPUT

      - name: Remove _uv suffix from FEIL
        id: feil_clean
        run: |
          clean_feil="${{ github.event.inputs.FEIL }}"
          clean_feil="${clean_feil%_v}"  # 去掉结尾的 _v（如果有）
          clean_feil="${clean_feil%_u}"  # 去掉结尾的 _u（如果有）
          echo "value=$clean_feil" >> $GITHUB_OUTPUT

      - name: Upload AnyKernel3
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_SukiSUUltra_${{ env.KSUVER }}_${{ steps.feil_clean.outputs.value }}${{ steps.suffix.outputs.value }}
          path: ./AnyKernel3/*
